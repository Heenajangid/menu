<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Microphone Input Demo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
            background-color: #f1f1f1;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
        }

        @keyframes gradient {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        h1 {
            margin-bottom: 20px;
            color: #333;
        }

        button {
            margin: 10px;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            text-align: center;
            font-size: 18px;
            width: auto;
        }

        button:hover {
            background-color: #3e8e41;
        }

        #status {
            margin-bottom: 20px;
            color: #333;
        }

        #homeButton {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Voice Recorder</h1>
    <button id="start">Start Recording</button>
    <button id="stop">Stop Recording</button>
    <p id="status">Status: Idle</p>
    <audio id="audio" controls></audio>
    <button id="homeButton" onclick="window.location.href='index.html'">Home</button>

    <script>
        document.getElementById('start').onclick = async function() {
            const status = document.getElementById('status');
            const audioElement = document.getElementById('audio');
            status.textContent = 'Status: Recording...';

            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                status.textContent = 'Status: getUserMedia not supported in this browser.';
                return;
            }

            const constraints = { audio: true };
            let mediaRecorder;
            let audioChunks = [];

            try {
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = function() {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    const audioUrl = URL.createObjectURL(audioBlob);
                    audioElement.src = audioUrl;
                    status.textContent = 'Status: Recording stopped.';
                };

                mediaRecorder.start();
            } catch (err) {
                status.textContent = `Status: Error - ${err.message}`;
            }

            document.getElementById('stop').onclick = function() {
                if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                    mediaRecorder.stop();
                }
            };
        };
    </script>
</body>
</html>
